{
    "posts": [
        {
            "id": "6026f7a0678fdf0001c11877",
            "uuid": "74b8abef-823e-4842-befa-0a8080a2314e",
            "title": "Serving a Single Page Application and API With Caddy v2",
            "slug": "serving-spa-and-apis-with-caddy",
            "html": "<p>As part of my on going development for <a href=\"https://github.com/hay-kot/mealie\">Mealie</a>, a self hosted recipe manager, I needed to split the static files from the API to simplify deployment and get some clunky code out of the FastAPI backend. Instead of using the traditional Nginx configuration I decided to use a newer web server Caddy to handle requests. Even though Caddy is a fairly simple and easy to use web server I found it difficult to quickly determine the correct way to use both a SPA and an API backend served on subpaths in the uri. This is my quick guide on getting a server up and running to server your SPA and the API on the same domain. </p><p>Here's the final CaddyFile, we'll break it down below.</p><pre><code class=\"language-CaddyFile\">{\n  auto_https off\n}\n\n:80 {\n  @proxied path /api/* /docs /openapi.json\n\n  root * /app/dist\n  encode gzip\n  uri strip_suffix /\n  \n  handle @proxied {\n    reverse_proxy http://127.0.0.1:9000 \n  }\n\n  handle {\n    try_files {path}.html {path} /\n    file_server \n  }\n\n}</code></pre><p>The first part is the main configuration where you can use several options to customize the overall behavior of Caddy. In this case I did not need encryption via https as this is designed to sit behind another instance of a proxy server. Including <code>auto_https off</code> will disable the automatic https through lets encrypt. </p><pre><code>{\n  auto_https off\n}</code></pre><p><code>:80</code> refers to the port that Caddy will listen on, everything included in the <code>{}</code> will be associated with port 80. <code>@proxied</code> is a short-hand in Caddy to use a snippet somewhere else in the file. In this case we'll define our API routes here and pass them to a handler later in the file. Since I'm using FastAPI I needed to add a few additional routes besides <code>/api/*</code>. </p><p>Next we have the <code>encode gzip</code> and <code>uri strip_suffix /</code> Â these are little helpers that enable gzip and strip trailing <code>/</code> on urls. This was extremely helpful as defining routes in FastAPI as I did not need to account for two paths, the proxy server will always strip the trailing <code>/</code>. </p><p>To deal with the API we're going to use the <code>handle</code> directive and pass the <code>@proxied</code> snippet as that matcher to pick up all our api routes. Then we're going to use the <code><a href=\"https://caddyserver.com/docs/caddyfile/directives/reverse_proxy\">reverse_proxy</a></code> directive and pass it our API server. In this case I'm using a local server on port 9000</p><pre><code>  handle @proxied {\n    reverse_proxy http://127.0.0.1:9000 \n  }</code></pre><p>Finally we need to mount the static files. We'll again reuse the handle directive but this time we won't include a matcher and instead handle all requests that were not previously handled. The <a href=\"https://caddyserver.com/docs/caddyfile/directives/try_files\"><code>try_files</code></a> directive is then used to match the requests against a file, if the request does not match any static files, rewrite to your index.html. Lastly you add the <a href=\"https://caddyserver.com/docs/caddyfile/directives/file_server\"><code>file_server</code></a> directive to tell Caddy to server up static files</p><pre><code>  handle {\n    try_files {path}.html {path} /\n    file_server \n  }</code></pre>",
            "comment_id": "6026f7a0678fdf0001c11877",
            "feature_image": "https://blog.hay-kot.dev/content/images/2021/02/Caddy-Document-2.png",
            "featured": false,
            "visibility": "public",
            "email_recipient_filter": "none",
            "created_at": "2021-02-12T21:48:16.000+00:00",
            "updated_at": "2021-02-13T03:27:05.000+00:00",
            "published_at": "2021-02-13T03:27:05.000+00:00",
            "custom_excerpt": "Caddy is a simple, powerful, and extensible platform to serve your sites, services, and apps, written in Go. It's ability to split your SPA and API with a short and simple config makes it my favorite web-server for my projects. ",
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "url": "https://blog.hay-kot.dev/serving-spa-and-apis-with-caddy/",
            "excerpt": "Caddy is a simple, powerful, and extensible platform to serve your sites, services, and apps, written in Go. It's ability to split your SPA and API with a short and simple config makes it my favorite web-server for my projects. ",
            "reading_time": 2,
            "access": true,
            "send_email_when_published": false,
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "email_subject": null
        },
        {
            "id": "6022f9dce2c02f000123001e",
            "uuid": "0171ad42-df6a-4ddc-86b4-7c98f244968b",
            "title": "From Windows to M1",
            "slug": "the-best-laptop-ive-ever-used-from-windows-to-the-m1",
            "html": "<p>As a long time, diehard Windows fan it slightly pains me to say that the M1 MacBook Air is by far the greatest laptop I've ever used. Over the past few weeks I've scoured the internet to find the perfect laptop for traveling and light development. I adamantly refused to buy into the MacOS ecosystem as I was raised by a diehard windows administrator. After weeks of being undecided I finally caved and took the plunge into the MacBook Air and boy oh boy was I wrong.</p><h2 id=\"first-impressions\">First Impressions</h2><p>Starting off, the boot up experience wasn't anything special. After fumbling a bit to get my icloud account setup I was a bit confused about having a local account and a icloud account and seemingly had to use both passwords at different times to authorize different items. I found my self using the wrong password multiple times. A small hurdle but a hurdle none the less. </p><p>To my surprise, the experience of installing and updating applications felt very...linux-like? I was able to use <a href=\"https://brew.sh/\">brew</a> as a package manager with cask right out of the box, no rosetta nonsense. I opened terminal installed brew and away I went. The overall performance of applications was also a surprise.</p><p>As a \"later adopter\" of the M1 a lot of the major applications I use were already ported over to work natively on the M1 processor. Things like Word, Excel, and Powerpoint ran well and the performance of the <em>new </em>Outlook was excellent. Traditionally, I'm not a fan of using Outlook however the new Mac application has made some significant style changes that make Outlook feel so much more modern and accessible, something that was lacking in the outlook experience on Windows. </p><p>A small tip, if you are interested in knowing what architecture your current application is running in there's a nifty app called <a href=\"https://apps.apple.com/us/app/silicon-info/id1542271266?mt=12\">Silicone Info</a> that adds a small icon to the top bar that you can check and see if it's Intel or Arm </p><h2 id=\"basic-development-setup\">Basic Development Setup</h2><p>Small Caveat: I am, by no means, a hardcore developer. My main use cases are web development with Javascript, Vue and Python so that may color my experiences with the M1. </p><p>With any linux machine I have a few dot files with shortcuts and snippets that I like to include with a new install. The Mac being somewhat unix based, I pulled my dot files from GitHub and ran my setup script to see if it would run. Granted it's a small script that mostly just sets up zsh so I fully expected it to work and it did. I didn't need to change a single thing. </p><p>Next thing I needed to do was actually get a project running. I installed VSCode with brew but wasn't super impressed with the performance of the intel version, not that it was bad, it just ran like it did on windows. Luckily the preview version support Apple Silicon! Setting up the preview version of VSCode was super simple, just download the zip file, extract it and you're off to the races. Running in preview was noticeably faster than the default install and well worth and bugs you may experience. I haven't had any problems using the preview version. Once VSCode was setup I pulled down my open source application <a href=\"https://github.com/hay-kot/mealie\">Mealie</a>, ran <code>npm install</code> and <code>poetry install</code> , started the dev servers and was up and running in about 10 minutes without any clunk work arounds. </p><h2 id=\"overall-impression\">Overall Impression</h2><p>As a seasoned Windows user and someone who thought WSL2 would be the best developer environment in 2020, it's hard to admin but the M1 Macbook Air is easily the best computer I've ever used. Comparing it against my i9 gaming desktop with 48 gigs of ram, I still think I would rather develop on the M1. It just feels <em>that</em> much better of a machine. </p>",
            "comment_id": "6022f9dce2c02f000123001e",
            "feature_image": "https://images.unsplash.com/photo-1537498425277-c283d32ef9db?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxMTc3M3wwfDF8c2VhcmNofDF8fG1hY2Jvb2t8ZW58MHx8fA&ixlib=rb-1.2.1&q=80&w=2000",
            "featured": false,
            "visibility": "public",
            "email_recipient_filter": "none",
            "created_at": "2021-02-09T21:08:44.000+00:00",
            "updated_at": "2021-02-12T06:08:42.000+00:00",
            "published_at": "2021-02-12T06:08:42.000+00:00",
            "custom_excerpt": "As a long time, diehard Windows fan it slightly pains me to say that the M1 MacBook Air is by far the greatest laptop I've ever used. I adamantly refused to buy into the MacOS ecosystem but after weeks of being undecided on a new laptop I finally caved and took the plunge into the MacBook Air.",
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "url": "https://blog.hay-kot.dev/the-best-laptop-ive-ever-used-from-windows-to-the-m1/",
            "excerpt": "As a long time, diehard Windows fan it slightly pains me to say that the M1 MacBook Air is by far the greatest laptop I've ever used. I adamantly refused to buy into the MacOS ecosystem but after weeks of being undecided on a new laptop I finally caved and took the plunge into the MacBook Air.",
            "reading_time": 3,
            "access": true,
            "send_email_when_published": false,
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "email_subject": null
        },
        {
            "id": "5ff3b0a0a57fc900015cec8d",
            "uuid": "cf5957ea-47e5-4a49-ace8-8438bc7af01e",
            "title": "SSH Login Notifications in Home Assistant With Node-Red",
            "slug": "ssh-notifications-in-home-assistant",
            "html": "<p><a href=\"https://www.home-assistant.io/\">Home Assistant</a> is best described by the project themselves</p><blockquote>Open source home automation that puts local control and privacy first. Powered by a worldwide community of tinkerers and DIY enthusiasts. Perfect to run on a Raspberry Pi or a local server.</blockquote><p>As an avid self-hosting and chronic time waster, Hoem Assistant is a gold mine of little projects here an there that balloon into a massive and critical part of my home. I dread the day the batteries run out on my motion sensors and I have to <strong>manually</strong> turn the lights on. As such a critical part of my home infrastructure, I've come to have a thought nearly anytime I do a project. How does this integrate into Home Assistant? Â </p><p>For Christmas my lovely wife was nice enough to get me a subscription to a VPS so I could host a blog and run a few other things in the cloud. As the paranoid self-hoster I am, I wanted to get notifications for SSH Logins and loop those into Home Assistant for extra convenience. Solving this problem was WAY easier than I imagined. With a short script and a little data formatting, I was able to create a <a href=\"https://www.home-assistant.io/lovelace/logbook/\">Logbook Card</a> on my dashboard that showed recent activity. </p><h2 id=\"in-home-assistant-node-red\">In Home Assistant - Node-Red</h2><p>We'll be using a webhook to receive data from the server on Home Assistant. To do this, there are two options. Using Node-Red, or using yaml. A long time ago I decided to shift all my automation from yaml to Node-Red so that is the path I recommend and will go over here. However you can accomplish the same using yaml with a combination of webhooks and Data Templating.</p><p> With Node-Red you'll need to create a webhook node and generate a random URL (save this for later). Connect that to a JSON block to process the posted data into a JavaScript object and optionally pass that through a Change Node to set the Topic, and a Delay Node to limit the messages. Finally you need to map the actually value to an Entity Node. We'll be using the payload.message object to hold the entity sensor value. </p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.hay-kot.dev/content/images/2021/01/flow-Example-1.png\" class=\"kg-image\" alt srcset=\"https://blog.hay-kot.dev/content/images/size/w600/2021/01/flow-Example-1.png 600w, https://blog.hay-kot.dev/content/images/2021/01/flow-Example-1.png 885w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Flow Example</figcaption></figure><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.hay-kot.dev/content/images/2021/01/ssh_entity_node_config.png\" class=\"kg-image\" alt><figcaption>Entity Payload</figcaption></figure><figure class=\"kg-card kg-code-card\"><pre><code>[{\"id\":\"ac17221d.ca7b4\",\"type\":\"ha-webhook\",\"z\":\"bee214af.688e28\",\"name\":\"SSH Notification Webhook\",\"server\":\"15e97f32.f16891\",\"outputs\":1,\"webhookId\":\"MY-SSH-WEBHOOK\",\"payloadLocation\":\"payload\",\"payloadLocationType\":\"msg\",\"headersLocation\":\"\",\"headersLocationType\":\"none\",\"x\":130,\"y\":400,\"wires\":[[\"6812e653.224d68\"]]},{\"id\":\"38588fad.38fd88\",\"type\":\"ha-entity\",\"z\":\"bee214af.688e28\",\"name\":\"SSH Entity\",\"server\":\"15e97f32.f16891\",\"version\":1,\"debugenabled\":false,\"outputs\":1,\"entityType\":\"sensor\",\"config\":[{\"property\":\"name\",\"value\":\"SSH Login\"},{\"property\":\"device_class\",\"value\":\"\"},{\"property\":\"icon\",\"value\":\"\"},{\"property\":\"unit_of_measurement\",\"value\":\"\"}],\"state\":\"payload.message\",\"stateType\":\"msg\",\"attributes\":[],\"resend\":true,\"outputLocation\":\"\",\"outputLocationType\":\"none\",\"inputOverride\":\"allow\",\"x\":750,\"y\":400,\"wires\":[[]]},{\"id\":\"78b836a5.441e78\",\"type\":\"delay\",\"z\":\"bee214af.688e28\",\"name\":\"\",\"pauseType\":\"rate\",\"timeout\":\"5\",\"timeoutUnits\":\"seconds\",\"rate\":\"1\",\"nbRateUnits\":\"1\",\"rateUnits\":\"minute\",\"randomFirst\":\"1\",\"randomLast\":\"5\",\"randomUnits\":\"seconds\",\"drop\":true,\"x\":530,\"y\":400,\"wires\":[[\"38588fad.38fd88\"]]},{\"id\":\"6812e653.224d68\",\"type\":\"json\",\"z\":\"bee214af.688e28\",\"name\":\"\",\"property\":\"payload\",\"action\":\"obj\",\"pretty\":false,\"x\":290,\"y\":400,\"wires\":[[\"78b836a5.441e78\",\"b22a904e.f459\"]]},{\"id\":\"b22a904e.f459\",\"type\":\"change\",\"z\":\"bee214af.688e28\",\"name\":\"Set Topic\",\"rules\":[{\"t\":\"move\",\"p\":\"payload.topic\",\"pt\":\"msg\",\"to\":\"topic\",\"tot\":\"msg\"}],\"action\":\"\",\"property\":\"\",\"from\":\"\",\"to\":\"\",\"reg\":false,\"x\":400,\"y\":400,\"wires\":[[\"78b836a5.441e78\"]]},{\"id\":\"15e97f32.f16891\",\"type\":\"server\",\"name\":\"Home Assistant\"}]</code></pre><figcaption>Code Sample</figcaption></figure><h2 id=\"on-the-server\">On The Server</h2><p>On the server you'd like to recieve notifications for you need to create/edit <code>/etc/ssh/sshrc</code> This file can be used to execute scripts on ssh login and is a built in functionality. Open in <code>sshrc</code> and paste in a version of the code below, while replacing the relevent information and formatting the message how you prefer. </p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-shell\">#!/bin/bash\n\nip=$(echo \"$SSH_CONNECTION\" | cut -d \" \" -f 1)\nhs=$(hostname)\n\nhostIP=\"$(ip address show dev eth0 | grep \"inet \" | head --lines=1 | cut --delimiter=' ' --fields=6 | cut --delimiter='/' --fields=1)\"\n\nlogger -t ssh-wrapper \"$USER\" login from \"$ip\"\n\ncurl --header \"Content-Type: application/json\" \\\n  --request POST \\\n  --data \\\n    '{\"topic\": \"'\"$hs\"'\",\n    \"host\": \"'\"$hs\"'\",\n    \"hostIP\": \"'\"$hostIP\"'\",\n    \"user\": \"'\"$USER\"'\",\n    \"from\": \"'\"$ip\"'\",\n    \"message\": \"'\"$USER@$hs just logged in from $ip\"'\"}' \\\n  https://homeassistant.mydomain.com/api/webhook/UNIQUE_KEY\n\n</code></pre><figcaption>Script updated 1/6/21, changes courtesy of @JonTheNiceGuy</figcaption></figure><p>I've added some some additional key/value pairs to show how to extend that data you might get from the server. These can all be accessed as a JavaScript object in Node-Red</p><p>WARNING: If you use Ansible to work on the server, after doing this and running an Ansible script, you may experience a bombardment of notifications. </p><h2 id=\"setting-up-the-card\">Setting up the Card</h2><p>Thanks to the Logbook Card, setup is easy and can be done from the UI. Edit the Lovelace dashboard you'd like to add the card to. Select Add Card and choose the Logbook Card. There you can select the sensor you created in the previous step, how many hours to show, and some other configuration information. </p><pre><code class=\"language-yml\">type: logbook\nentities:\n  - sensor.ssh_login\nhours_to_show: 24\n</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://blog.hay-kot.dev/content/images/2021/01/ssh_log-1.png\" class=\"kg-image\" alt></figure><p>Adding SSH logging to Home Assistant is super easy to do and can offer a tiny sliver of reassurance that your whole system isn't burning down by an unauthorized user.</p>",
            "comment_id": "5ff3b0a0a57fc900015cec8d",
            "feature_image": "https://blog.hay-kot.dev/content/images/2021/01/home_assistant_ssh.png",
            "featured": false,
            "visibility": "public",
            "email_recipient_filter": "none",
            "created_at": "2021-01-05T00:19:44.000+00:00",
            "updated_at": "2021-01-06T18:00:35.000+00:00",
            "published_at": "2021-01-05T06:13:31.000+00:00",
            "custom_excerpt": "Adding SSH logging to Home Assistant is super easy to do and can offer a tiny sliver of reassurance that your whole system isn't burning down by an unauthorized user.",
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "url": "https://blog.hay-kot.dev/ssh-notifications-in-home-assistant/",
            "excerpt": "Adding SSH logging to Home Assistant is super easy to do and can offer a tiny sliver of reassurance that your whole system isn't burning down by an unauthorized user.",
            "reading_time": 4,
            "access": true,
            "send_email_when_published": false,
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "email_subject": null
        },
        {
            "id": "5ff0ef03a57fc900015cea13",
            "uuid": "f12f9afb-00d0-4b0c-9fbf-e98240861768",
            "title": "Mealie - Reflecting on my First \"Real\" Project",
            "slug": "reflecting-on-my-first-real-project",
            "html": "<!--kg-card-begin: markdown--><h2 id=\"theproject\">The Project</h2>\n<p>When beginning a coding project, even just to learn, it's important to me to make something I find useful. It also matters, almost moreso, for me to make things that others might find useful. If you take a look at the self hosted space there aren't many options in the Recipe Management realm. Specifically, I couldn't find anything that had an API which I could integrate into Home Assistant. To me, that was a perfect place to start for my first &quot;real&quot; project that would eventually be put out into the world for others.</p>\n<p>With that in mind, I considered what a good recipe website would need:</p>\n<ul>\n<li>Automatic Web Scrapping / Import from URL</li>\n<li>UI Recipe Editor</li>\n<li>Custom Tags / Categories</li>\n<li>Adding Custom Notes</li>\n<li>Meal Planner with Randomized Meal Planning</li>\n<li>Backup Data with Easy Import/Export</li>\n<li>Restful API</li>\n</ul>\n<p>With a baseline of what I wanted to create, I could actually get into the code. Because my primary language is Python, I decided to go with a FastAPI backend. This made it easy to create an API driven application that can be interacted with from many different places. For the frontend, I chose Vue. I'm fairly new to the world of Javascript, so this was the first framework I looked at which made sense to me. I liked that the framework made it easy to do the simple stuff, but it offered a rubust set of tools to do the more complicated stuff. I am looking forward to using it on a few more projects.</p>\n<h2 id=\"lessonslearned\">Lessons Learned</h2>\n<h3 id=\"wsl2onwindowsisapleasure\">WSL2 on Windows is a Pleasure</h3>\n<p>Being a long-time Windows user, I used to code directly in Windows with VSCode. This worked well most of the time. However, for this project I made the switch to using WSL2 on Windows for development and it was great for almost the entire project. I never ran into any issues getting setup, and docker worked straight out of the box. I previously used Docker on Windows, and it was a nightmare, but Microsoft made huge strides in improving the experience and making it feel like its running natively on Linux. The VSCode integration is also top-notch. If you're developing on Windows, I highly recommend moving your environment over to <a href=\"https://docs.microsoft.com/en-us/windows/wsl/install-win10\">WSL2</a>.</p>\n<h3 id=\"dockerisawesome\">Docker is Awesome</h3>\n<p>The most useful experience I had in this project was working with Docker in development. For the first half of the project, I worked primarily with a terminal window having to constantly restart the app after it crashed, even with the auto reload. When I ran it through Docker, the web server would continue to restart no matter what. This was probably a small timer saver overall, but the convenience factor was huge. On top of that, <a href=\"https://code.visualstudio.com/docs/editor/tasks\">VSCode Tasks</a> made building for production and development as simple as a few keyboard shortcuts.</p>\n<h3 id=\"usevscodetasks\">Use VSCode Tasks!</h3>\n<p>Another important lesson I learned was the importance of automating my work-flow. Nobody wants to type the same commands into terminal every time they need to test their build, and I'm a sucker for automation. That's where <a href=\"https://code.visualstudio.com/docs/editor/tasks\">VSCode Tasks</a> came in. All I did was write a script for what I wanted to do and added it to the vscode task.json. The example below shows the two scripts I'm using to execute my docker-compose.dev.sh and my docker-compose.sh for both development and production stacks.</p>\n<pre><code># ./.vscode/tasks.json\n{\n  &quot;version&quot;: &quot;2.0.0&quot;,\n  &quot;tasks&quot;: [\n    {\n      &quot;label&quot;: &quot;DEV: Build and Start Docker Compose&quot;,\n      &quot;command&quot;: &quot;./dev/scripts/docker-compose.dev.sh&quot;,\n      &quot;type&quot;: &quot;shell&quot;,\n      &quot;args&quot;: [],\n      &quot;problemMatcher&quot;: [&quot;$tsc&quot;],\n      &quot;presentation&quot;: {\n        &quot;reveal&quot;: &quot;always&quot;\n      },\n      &quot;group&quot;: &quot;test&quot;\n    },\n    {\n        &quot;label&quot;: &quot;Production: Build and Start Docker Compose&quot;,\n        &quot;command&quot;: &quot;./dev/scripts/docker-compose.sh&quot;,\n        &quot;type&quot;: &quot;shell&quot;,\n        &quot;args&quot;: [],\n        &quot;problemMatcher&quot;: [&quot;$tsc&quot;],\n        &quot;presentation&quot;: {\n          &quot;reveal&quot;: &quot;always&quot;\n        },\n        &quot;group&quot;: &quot;test&quot;\n      }\n  ]\n}\n\n</code></pre>\n<p>I learned to use the command palette to access my tasks with <code>ctrl</code> + <code>shift</code> + <code>p</code> and type tasks to bring up a list of options. I made sure to commit my .vscode file to have those available in the repository.</p>\n<h3 id=\"usemkdocsmaterialthemefordocumentation\">Use MKdocs Material Theme for Documentation</h3>\n<p>In the middle of the project, I was excited to discover Mkdocs, a framework/static site generator geared towards documentation. While it's default theme is not appealing to me, using the <a href=\"https://squidfunk.github.io/mkdocs-material/\">Material Theme</a>, I discovered I could generate beautiful documentation with little to no effort. Most settings can be configured in yaml, users are able to add custom js/cs as needed, and it uses plain old markdown to generate the site in a way that makes sense. It also has single line gh-pages deployment. It's as easy as <code>mkdocs gh-deploy</code> and now any site has live documentation hosted for free on github. It feels like magic and was worth the 10 minute setup.</p>\n<h3 id=\"acrashcourseindoitrightthefirsttime\">A Crash Course in &quot;Do it Right the First Time&quot;</h3>\n<blockquote>\n<p>&quot;Let me just write this little thing here, oh I'll just copy and paste, no big deal&quot;</p>\n</blockquote>\n<p>But it was a big deal. As I went through the project, there were many times I had to stop and refactor code I had just written. I had either written sloppy code, or doubled up on things in too many places. One particular example was with unpacking documents from MongoDB. In nearly every class I had a step to unpack the document and turn it into a class object that I repeated slightly differently in each function. Instead of including that step in every function that retrieves from the database, I abstracted it into it's own function. After the creating the new function, I had go back and refactor how nearly all other functions worked. If I had started with a better idea on how to work with my data, I may have been able to see this coming before writing a bunch of code.</p>\n<h2 id=\"finalthoughts\">Final Thoughts</h2>\n<p>My biggest take away from making Mealie is to take more time to map out how data flows in the application. With a data driven application, even something as minor as JSON, I'm somewhat at the mercy of the data. In some instances one structurs their code to deal with data in a way that makes life easy for both the frontend and the backend. Sometimes, it only works for the backend. Before I create a class that represents data, I'm going to really take some time to map out how I want that data to be structured for both my frontend development and my backend.</p>\n<p>Finally, after <a href=\"https://www.reddit.com/r/selfhosted/comments/kp3qih/mealie_a_self_hosted_recipe_manager_alpha_release/\">publishing the project in a reddit thread</a> I was overwhelmed with the support, kind words, and even the financial support from one very giving Redditor. It's hard to explain how good it feels to get so much positive feedback on something I spent close to a hundred hours on. The self-hosted community has provided me with a lot of support, projects, and time wasting endeavors. I can only hope that from the Alpha release of Mealie, it can be built into something that is supported by the community. It feels really good to be able to give something back.</p>\n<!--kg-card-end: markdown-->",
            "comment_id": "5ff0ef03a57fc900015cea13",
            "feature_image": "https://blog.hay-kot.dev/content/images/2021/01/mealie_snapshot.png",
            "featured": false,
            "visibility": "public",
            "email_recipient_filter": "none",
            "created_at": "2021-01-02T22:09:07.000+00:00",
            "updated_at": "2021-01-05T02:31:32.000+00:00",
            "published_at": "2021-01-02T23:25:31.000+00:00",
            "custom_excerpt": "This is short blog post on my first \"real\" programming project, and what I learned through the process.",
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "url": "https://blog.hay-kot.dev/reflecting-on-my-first-real-project/",
            "excerpt": "This is short blog post on my first \"real\" programming project, and what I learned through the process.",
            "reading_time": 5,
            "access": true,
            "send_email_when_published": false,
            "og_image": null,
            "og_title": null,
            "og_description": null,
            "twitter_image": null,
            "twitter_title": null,
            "twitter_description": null,
            "meta_title": null,
            "meta_description": null,
            "email_subject": null
        }
    ],
    "meta": {
        "pagination": {
            "page": 1,
            "limit": 15,
            "pages": 1,
            "total": 4,
            "next": null,
            "prev": null
        }
    }
}